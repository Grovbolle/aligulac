// Generated by CoffeeScript 1.7.1
var hide_charts, is_descendant, mark_all, set_textarea_line, set_textbox, switch_tab, switch_to, togHTML, toggle_form, togvis, togvis_div, togvis_span, togvis_tbody;

is_descendant = function(par, child) {
  var node;
  node = child;
  while (node != null) {
    if (node === par) {
      return true;
    } else {
      node = node.parentNode;
    }
  }
  return false;
};

set_textbox = function(id, s) {
  return $("#" + id)[0].value = s;
};

set_textarea_line = function(id, s, line) {
  var a, cur;
  cur = $("#" + id)[0].value.replace(/\r\n/, '\n');
  a = cur.split('\n');
  a[line] = s;
  return $("#" + id)[0].value = a.join('\n');
};

togvis = function(id, visible) {
  return $("#" + id).toggle();
};

togvis_tbody = function(id) {
  return togvis(id);
};

togvis_span = togvis_tbody;

togvis_div = togvis_span;

switch_to = function(id, all) {
  var cid, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = all.length; _i < _len; _i++) {
    cid = all[_i];
    if (cid === id) {
      _results.push($("#" + cid).show());
    } else {
      _results.push($("#" + cid).hide());
    }
  }
  return _results;
};

switch_tab = function(id, all) {
  var tabid, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = all.length; _i < _len; _i++) {
    tabid = all[_i];
    if (tabid === id) {
      $("#" + tabid).show();
      _results.push($("#" + tabid + "-tab").attr('class', 'tabsel'));
    } else {
      $("#" + tabid).hide();
      _results.push($("#" + tabid + "-tab").attr('class', 'tabunsel'));
    }
  }
  return _results;
};

toggle_form = function(id) {
  return $("#" + id).show();
};

hide_charts = function() {
  return $("#chart").hide();
};

togHTML = function(id, a, b) {
  var d;
  d = $("#" + id);
  if (d.html().trim() === a) {
    return d.html(b);
  } else {
    return d.html(a);
  }
};

mark_all = function(val, prefix) {
  return $('input:checkbox').each(function(i, e) {
    if (prefix === '' || 0 === $(e).name.indexOf(prefix)) {
      return $(e).checked = val;
    }
  });
};
// Generated by CoffeeScript 1.7.1
var gen_short;

gen_short = function(path) {
  return $.get("/m/new/?url=" + encodeURIComponent(path), function(data) {
    $("#genshort").hide();
    $("#dispshort").html("<a href=\"/m/" + data + "/\">/m/" + data + "</a>");
    return $("#dispshort").show();
  });
};
// Generated by CoffeeScript 1.7.1
var mobile_regex;

mobile_regex = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini/i;

$(function() {
  var allMenu, menuHandler;
  allMenu = $('.menu > ul > li > ul');
  menuHandler = function() {
    var menu;
    menu = $(this).parent().next();
    if (menu.is(':visible')) {
      allMenu.hide();
    } else {
      allMenu.hide();
      menu.show();
    }
    $(document).one('click', function() {
      return menu.hide();
    });
    return false;
  };
  if (mobile_regex.test(navigator.userAgent)) {
    $(".actionSelector").removeAttr("style");
    $('.menu > ul > li > div > a').next().button({
      text: false,
      icons: {
        primary: 'ui-icon-triangle-1-s'
      }
    }).click(menuHandler).parent().next().buttonset().hide().menu();
    return allMenu.parent().css({
      paddingLeft: "0.1em",
      paddingRight: "0.1em"
    });
  } else {
    return $('.menu > ul > li > div > a').hover(menuHandler).parent().next().buttonset().hide().menu();
  }
});
/* ======================================================================
 * AUTOCOMPLETE SEARCH TEXTBOX
 * ======================================================================
 */
var aligulacAutocompleteTemplates = function (ajaxobject) {
    if ((!ajaxobject.tag) && (!ajaxobject.name) && (!ajaxobject.fullname)) {
        return '<span class="autocomplete-header">' + ajaxobject.label + '</span>';
    }
    switch (ajaxobject.type) {
        case 'player':
            ajaxobject.key = ajaxobject.tag + ' ' + ajaxobject.id;
            return '<a>{aligulac-flag}<img src="{aligulac-race}" />{aligulac-name}</a>'.replace('{aligulac-flag}',
               ajaxobject.country ? '<img src="' + flagsDir + ajaxobject.country.toLowerCase() + '.png" />' : ' ')
            .replace('{aligulac-race}', racesDir + ajaxobject.race.toUpperCase() + '.png')
            .replace('{aligulac-name}', ajaxobject.tag);
        case 'team':
            ajaxobject.key = ajaxobject.name;
            return '<a>{aligulac-name}</a>'
            .replace('{aligulac-name}', ajaxobject.name);
        case 'event':
            ajaxobject.key = ajaxobject.fullname;
            return '<a>{aligulac-name}</a>'
            .replace('{aligulac-name}', ajaxobject.fullname);
    }
    return '<a>' + ajaxobject.value + '</a>';
};
var getResults = function (term, restrict_to) {

    if (!restrict_to)
        restrict_to = ['players', 'teams', 'events'];
    if (typeof(restrict_to) == 'string')
        restrict_to = [restrict_to];
    var deferred = $.Deferred()
    var url = '/search/json/';
    $.ajax({
        type: 'GET',
        url: url,
        dataType: 'json',
        data: { q: term, search_for: restrict_to.join(',') }
    }).success(function (ajaxData) {
        deferred.resolve(ajaxData);
    });

    return deferred;
};

$(document).ready(function () {

    $('#SearchTextBox').autocomplete({
        source: function (request, response) {

            $.when(getResults(request.term)).then(function (result) {

                    var playerresult = [];
                    var teamresult = [];
                    var eventresult = [];
                    if (result.players != undefined && result.players.length > 0) {
                        playerresult = [{ label: 'Players' }].concat(result.players);
                        for (var i = 1; i < playerresult.length; i++)
                            playerresult[i].type = 'player';
                    }
                    if (result.teams != undefined && result.teams.length > 0) {
                        teamresult = [{ label: 'Teams' }].concat(result.teams);
                        for (var i = 1; i < teamresult.length; i++)
                            teamresult[i].type = 'team';
                    }
                    if (result.events != undefined && result.events.length > 0) {
                        eventresult = [{ label: 'Events' }].concat(result.events);
                        for (var i = 1; i < eventresult.length; i++)
                            eventresult[i].type = 'event';
                    }
                    var data = playerresult.concat(teamresult.concat(eventresult));
                    response(data);
                });

        },
        minLength: 2,
        select: function (event, ui) {
            $('#SearchTextBox').val(ui.item.key);
            return false;
        },
        open: function () {
            $('.ui-menu')
                .width('auto');
        }
    }).data('ui-autocomplete')._renderItem = function (ul, item) {
        return $('<li></li>')
            .append(aligulacAutocompleteTemplates(item))
            .appendTo(ul);
    };
});

/* ======================================================================
 * AUTOCOMPLETE PREDICTIONS
 * ======================================================================
 */
$(document).ready(function () {
    var $idPalyersTextArea = $("#id_players");
    $idPalyersTextArea.tagsInput({
        autocomplete_opt: {
            minLength: 2,
            select: function (event, ui) {
                $idPalyersTextArea.addTag(ui.item.key);
                $("#id_players_tag").focus();
                return false;
            },
            open: function () {
                $('.ui-menu')
                    .width('auto');
            }
        },
        autocomplete_url: function (request, response) {
            $.when(getResults(request.term, 'players')).then(function (result) {
                if (result.players != undefined) {
                    for (var i = 0; i < result.players.length; i++) {
                        result.players[i].type = 'player';
                    }
                }
                response(result.players);
            });
        },
        defaultText: 'add a player',
        delimiter: '\n',
        formatAutocomplete: aligulacAutocompleteTemplates
    })
    // Hacking the enter key down to submit the form when the
    // current input is empty
    $("#id_players_addTag").keydown(function (event) {
        if (event.which == 13 && $("#id_players_tag").val() == "")
            $(this).closest("form").submit();
    });
});
