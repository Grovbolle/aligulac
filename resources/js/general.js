// Generated by CoffeeScript 1.7.1
var aligulacAutocompleteTemplates, getResults;

aligulacAutocompleteTemplates = function(obj) {
  var flag, name, race;
  if (!((obj.tag != null) || (obj.name != null) || (obj.fullname != null))) {
    return "<span class='autocomplete-header'>" + autocomplete_strings[obj.label] + "</span>";
  }
  switch (obj.type) {
    case 'player':
      obj.key = obj.tag + ' ' + obj.id;
      flag = (obj.country != null ? "<img src='" + (flagsDir + obj.country.toLowerCase()) + ".png' />" : "");
      race = "<img src='" + (racesDir + obj.race.toUpperCase()) + ".png' />";
      name = obj.tag;
      return "<a>" + flag + race + name + "</a>";
    case 'team':
      obj.key = obj.name;
      return "<a>" + obj.name + "</a>";
    case 'event':
      obj.key = obj.fullname;
      return "<a>" + obj.fullname + "</a>";
  }
  return "<a>" + obj.value + "</a>";
};

getResults = function(term, restrict_to) {
  var deferred, url;
  if (restrict_to == null) {
    restrict_to = ['players', 'teams', 'events'];
  } else if (typeof restrict_to === 'string') {
    restrict_to = [restrict_to];
  }
  deferred = $.Deferred();
  url = '/search/json/';
  $.ajax({
    type: 'GET',
    url: url,
    dataType: 'json',
    data: {
      q: term,
      search_for: restrict_to.join(',')
    }
  }).success(function(ajaxData) {
    return deferred.resolve(ajaxData);
  });
  return deferred;
};

$(document).ready(function() {
  return $('#SearchTextBox').autocomplete({
    source: function(request, response) {
      return $.when(getResults(request.term)).then(function(result) {
        var eventresult, playerresult, prepare_response, teamresult;
        prepare_response = function(list, type, label) {
          var x, _i, _len;
          if ((list == null) || list.length === 0) {
            return [];
          }
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            x = list[_i];
            x.type = type;
          }
          return [
            {
              label: label
            }
          ].concat(list);
        };
        playerresult = prepare_response(result.players, 'player', 'Players');
        teamresult = prepare_response(result.teams, 'team', 'Teams');
        eventresult = prepare_response(result.event, 'event', 'Events');
        return response(playerresult.concat(teamresult.concat(eventresult)));
      });
    },
    minLength: 2,
    select: function(event, ui) {
      $('#SearchTextBox').val(ui.item.key);
      return false;
    },
    open: function() {
      return $('.ui-menu').width('auto');
    }
  }).data('ui-autocomplete')._renderItem = function(ul, item) {
    return $('<li></li>').append(aligulacAutocompleteTemplates(item)).appendTo(ul);
  };
});

$(document).ready(function() {
  var $idPalyersTextArea;
  $idPalyersTextArea = $("#id_players");
  $idPalyersTextArea.tagsInput({
    autocomplete_opt: {
      minLength: 2,
      select: function(event, ui) {
        $idPalyersTextArea.addTag(ui.item.key);
        $("#id_players_tag").focus();
        return false;
      },
      open: function() {
        return $('.ui-menu').width('auto');
      }
    },
    autocomplete_url: function(request, response) {
      return $.when(getResults(request.term, 'players')).then(function(result) {
        var p, _i, _len, _ref;
        if (result.players != null) {
          _ref = result.players;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            p.type = 'player';
          }
          return response(result.players);
        }
      });
    },
    defaultText: 'add a player',
    delimiter: '\n',
    formatAutocomplete: aligulacAutocompleteTemplates
  });
  return $("#id_players_addTag").keydown(function(event) {
    if (event.which === 13 && $("#id_players_tag").val() === "") {
      return $(this).closest("form").submit();
    }
  });
});
// Generated by CoffeeScript 1.7.1
var gen_short;

gen_short = function(path) {
  return $.get("/m/new/?url=" + encodeURIComponent(path), function(data) {
    $("#genshort").hide();
    $("#dispshort").html("<a href=\"/m/" + data + "/\">/m/" + data + "</a>");
    return $("#dispshort").show();
  });
};
// Generated by CoffeeScript 1.7.1
var hide_charts, is_descendant, mark_all, set_textarea_line, set_textbox, switch_tab, switch_to, togHTML, toggle_form, togvis, togvis_div, togvis_span, togvis_tbody;

is_descendant = function(par, child) {
  var node;
  node = child;
  while (node != null) {
    if (node === par) {
      return true;
    } else {
      node = node.parentNode;
    }
  }
  return false;
};

set_textbox = function(id, s) {
  return $("#" + id)[0].value = s;
};

set_textarea_line = function(id, s, line) {
  var a, cur;
  cur = $("#" + id)[0].value.replace(/\r\n/, '\n');
  a = cur.split('\n');
  a[line] = s;
  return $("#" + id)[0].value = a.join('\n');
};

togvis = function(id, visible) {
  return $("#" + id).toggle();
};

togvis_tbody = function(id) {
  return togvis(id);
};

togvis_span = togvis_tbody;

togvis_div = togvis_span;

switch_to = function(id, all) {
  var cid, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = all.length; _i < _len; _i++) {
    cid = all[_i];
    if (cid === id) {
      _results.push($("#" + cid).show());
    } else {
      _results.push($("#" + cid).hide());
    }
  }
  return _results;
};

switch_tab = function(id, all) {
  var tabid, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = all.length; _i < _len; _i++) {
    tabid = all[_i];
    if (tabid === id) {
      $("#" + tabid).show();
      _results.push($("#" + tabid + "-tab").attr('class', 'tabsel'));
    } else {
      $("#" + tabid).hide();
      _results.push($("#" + tabid + "-tab").attr('class', 'tabunsel'));
    }
  }
  return _results;
};

toggle_form = function(id) {
  return $("#" + id).show();
};

hide_charts = function() {
  return $("#chart").hide();
};

togHTML = function(id, a, b) {
  var d;
  d = $("#" + id);
  if (d.html().trim() === a) {
    return d.html(b);
  } else {
    return d.html(a);
  }
};

mark_all = function(val, prefix) {
  return $('input:checkbox').each(function(i, e) {
    if (prefix === '' || 0 === $(e).name.indexOf(prefix)) {
      return $(e).checked = val;
    }
  });
};
// Generated by CoffeeScript 1.7.1
var mobile_regex;

mobile_regex = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini/i;

$(function() {
  var allMenu, menuHandler;
  allMenu = $('.menu > ul > li > ul');
  menuHandler = function() {
    var menu;
    menu = $(this).parent().next();
    if (menu.is(':visible')) {
      allMenu.hide();
    } else {
      allMenu.hide();
      menu.show();
    }
    $(document).one('click', function() {
      return menu.hide();
    });
    return false;
  };
  if (mobile_regex.test(navigator.userAgent)) {
    $(".actionSelector").removeAttr("style");
    $('.menu > ul > li > div > a').next().button({
      text: false,
      icons: {
        primary: 'ui-icon-triangle-1-s'
      }
    }).click(menuHandler).parent().next().buttonset().hide().menu();
    return allMenu.parent().css({
      paddingLeft: "0.1em",
      paddingRight: "0.1em"
    });
  } else {
    return $('.menu > ul > li > div > a').hover(menuHandler).parent().next().buttonset().hide().menu();
  }
});
